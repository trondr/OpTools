<?xml version="1.0" encoding="utf-8"?>
<Project DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">

  <!--Set product properties and paths-->
  
  <PropertyGroup>    
    <ProductName>OpTools</ProductName>
    <ProductCompany>github.com.trondr</ProductCompany>
    <ProductDescription>github.com.trondr Op Tools</ProductDescription>
    <ProductCopyright>Copyright &#169; github.com.trondr $([System.DateTime]::Now.Year)</ProductCopyright>
    <ProductProjectName>$(ProductName)</ProductProjectName>

    <ShortYear>$([System.DateTime]::Now.ToString(`yy`))</ShortYear>
    <DayOfYear>$([System.DateTime]::Now.DayOfYear.ToString(`000`))</DayOfYear>
    <Major>1</Major>
    <Minor>0</Minor>
    <Build>$(ShortYear)$(DayOfYear)</Build>
    <Revision>0</Revision>

    <BinDirectory>$(MSBuildProjectDirectory)\bin</BinDirectory>
    <SrcDirectory>$(MSBuildProjectDirectory)\src</SrcDirectory>
    <ToolsDirectory>$(MSBuildProjectDirectory)\tools</ToolsDirectory>
  
    <NunitVersion>2.6.4</NunitVersion>
    
  </PropertyGroup>

  <!--
		Include MSBuild Community Tasks.
	-->
  <Choose>
    <When Condition="Exists('$(ToolsDirectory)\MSBuildCommunityTasks\MSBuild.Community.Tasks.Targets')">
      <PropertyGroup>
        <MSBuildCommunityTasksAvailable>true</MSBuildCommunityTasksAvailable>
		<MSBuildCommunityTasksPath>$(ToolsDirectory)\MSBuildCommunityTasks</MSBuildCommunityTasksPath>
      </PropertyGroup>
    </When>
    <Otherwise>
      <PropertyGroup>
        <MSBuildCommunityTasksAvailable>false</MSBuildCommunityTasksAvailable>
      </PropertyGroup>
    </Otherwise>
  </Choose>
  <Import Project="$(ToolsDirectory)\MSBuildCommunityTasks\MSBuild.Community.Tasks.Targets" Condition=" '$(MSBuildCommunityTasksAvailable)' == 'true' "/>

    <!--
		Include MSBuild Custom Tasks.
	-->
  <Choose>
    <When Condition="Exists('$(ToolsDirectory)\MSBuildCustomTasks\MSBuildCustomTasks.Targets')">
      <PropertyGroup>
        <MSBuildCustomTasksAvailable>true</MSBuildCustomTasksAvailable>
		<MSBuildCustomTasksPath>$(ToolsDirectory)\MSBuildCustomTasks</MSBuildCustomTasksPath>
      </PropertyGroup>
    </When>
    <Otherwise>
      <PropertyGroup>
        <MSBuildCustomTasksAvailable>false</MSBuildCustomTasksAvailable>
      </PropertyGroup>
    </Otherwise>
  </Choose>
  <Import Project="$(ToolsDirectory)\MSBuildCustomTasks\MSBuildCustomTasks.Targets" Condition=" '$(MSBuildCustomTasksAvailable)' == 'true' "/>
  
  <!-- Verify that NUnit is available-->
  
  <Choose>
    <When Condition="Exists('$(ToolsDirectory)\NUnit\nunit.exe')">
      <PropertyGroup>
        <NUnitIsAvailable>true</NUnitIsAvailable>
      </PropertyGroup>
    </When>
    <Otherwise>
      <PropertyGroup>
        <NUnitIsAvailable>false</NUnitIsAvailable>
      </PropertyGroup>
    </Otherwise>
  </Choose>

  <!-- Verify if current solution is in a .git repository-->

  <Choose>
    <When Condition="Exists('$(MSBuildProjectDirectory)\.git')">
      <PropertyGroup>
        <IsGitRepository>true</IsGitRepository>
      </PropertyGroup>
    </When>
    <Otherwise>
      <PropertyGroup>
        <IsGitRepository>false</IsGitRepository>
      </PropertyGroup>
    </Otherwise>
  </Choose>

  <ItemGroup>
    <DefaultExclude Include="$(MSBuildProjectDirectory)\**\.hg\**" />
    <DefaultExclude Include="$(MSBuildProjectDirectory)\**\.git\**" />
    <DefaultExclude Include="$(MSBuildProjectDirectory)\**\.svn\**" />
    <DefaultExclude Include="$(MSBuildProjectDirectory)\**\bin\**" />
    <DefaultExclude Include="$(MSBuildProjectDirectory)\**\obj\**" />
    <DefaultExclude Include="$(MSBuildProjectDirectory)\**\Release\**" />
    <DefaultExclude Include="$(MSBuildProjectDirectory)\**\Debug\**" />
    <DefaultExclude Include="$(MSBuildProjectDirectory)\**\Test\**" />
    <DefaultExclude Include="$(MSBuildProjectDirectory)\**\TestResults\**" />
    <DefaultExclude Include="$(MSBuildProjectDirectory)\**\doc\**" />
    <DefaultExclude Include="$(MSBuildProjectDirectory)\**\www\**" />
    <DefaultExclude Include="$(MSBuildProjectDirectory)\**\*.user" />
    <DefaultExclude Include="$(MSBuildProjectDirectory)\**\*.suo" />
    <DefaultExclude Include="$(MSBuildProjectDirectory)\**\*.zip" />    
	<DefaultExclude Include="$(MSBuildProjectDirectory)\**\TestResult.xml" />
  </ItemGroup>

  <ItemGroup>
    <SourceFiles Include="$(SrcDirectory)\**\*.*" Exclude="@(DefaultExclude)" />
	<SourceFiles Include="$(MSBuildProjectDirectory)\*.*" Exclude="@(DefaultExclude)" />
	<SourceFiles Include="$(ToolsDirectory)\**\*.*" Exclude="@(DefaultExclude)" />
  </ItemGroup>
  
  <Target Name="GitHashInit">
    <CreateProperty Value="unknown">
      <Output TaskParameter="Value" PropertyName="RevisionHash" />
    </CreateProperty>
	<Message Text="Initial RevisionHash=$(RevisionHash)" Importance="normal" />
  </Target>
  
  <Target Name="GitHash" Condition=" '$(IsGitRepository)' == 'true' " DependsOnTargets="GitHashInit">
    <GitVersion LocalPath="$(MSBuildProjectDirectory)" Timeout="5000">
      <Output TaskParameter="CommitHash" PropertyName="RevisionHash" />
    </GitVersion>
	<Message Text="Calculated RevisionHash=$(RevisionHash)" Importance="normal" />
  </Target>

  <Target Name="UpdateRevisionVersion">
    <XmlRead XPath="/version/property[@name='revision']/@value" XmlFileName="version.xml">
      <Output TaskParameter="Value" PropertyName="Revision" />
    </XmlRead>
    <Math.Add Numbers="$(Revision);1">
      <Output TaskParameter="Result" PropertyName="Revision" />
    </Math.Add>
    <XmlUpdate XPath="/version/property[@name='revision']/@value" XmlFileName="version.xml" Value="$(Revision)"/>
  </Target>

  <Target Name="UpdateBuildVersion">
    <XmlRead XPath="/version/property[@name='build']/@value" XmlFileName="version.xml">
      <Output TaskParameter="Value" PropertyName="Build" />
    </XmlRead>
    <Math.Add Numbers="0;$(ShortYear)$(DayOfYear)">
      <Output TaskParameter="Result" PropertyName="Build" />
    </Math.Add>
    <XmlUpdate XPath="/version/property[@name='build']/@value" XmlFileName="version.xml" Value="$(Build)"/>
  </Target>
  
  <Target Name="UpdateVersion" DependsOnTargets="GitHash;UpdateRevisionVersion;UpdateBuildVersion">
    <XmlRead XPath="/version/property[@name='major']/@value" XmlFileName="version.xml">
      <Output TaskParameter="Value" PropertyName="Major" />
    </XmlRead>
    <XmlRead XPath="/version/property[@name='minor']/@value" XmlFileName="version.xml">
      <Output TaskParameter="Value" PropertyName="Minor" />
    </XmlRead>
    <CreateProperty Value="$(Major).$(Minor).$(Build).$(Revision)">
      <Output TaskParameter="Value" PropertyName="AssemblyVersion" />
    </CreateProperty>
    <Message Text="AssemblyVersion: $(AssemblyVersion)"/>
  </Target>

  <Target Name="Version" DependsOnTargets="GitHash">
    <XmlRead XPath="/version/property[@name='major']/@value" XmlFileName="version.xml">
      <Output TaskParameter="Value" PropertyName="Major" />
    </XmlRead>
    <XmlRead XPath="/version/property[@name='minor']/@value" XmlFileName="version.xml">
      <Output TaskParameter="Value" PropertyName="Minor" />
    </XmlRead>
    <XmlRead XPath="/version/property[@name='build']/@value" XmlFileName="version.xml">
      <Output TaskParameter="Value" PropertyName="Build" />
    </XmlRead>
    <XmlRead XPath="/version/property[@name='revision']/@value" XmlFileName="version.xml">
      <Output TaskParameter="Value" PropertyName="Revision" />
    </XmlRead>
    <CreateProperty Value="$(Major).$(Minor).$(Build).$(Revision)">
      <Output TaskParameter="Value" PropertyName="AssemblyVersion" />
    </CreateProperty>
    <CreateProperty Value="$(Major)_$(Minor)_$(Build)_$(Revision)">
      <Output TaskParameter="Value" PropertyName="AssemblyVersionU" />
    </CreateProperty>
    <AssemblyInfo CodeLanguage="CS"
       OutputFile="$(SrcDirectory)\trondr.OpTools\Properties\AssemblyInfo.cs"
       AssemblyDescription="$(ProductDescription)"
       AssemblyCompany="$(ProductCompany)"
       AssemblyProduct="trondr.OpTools"
       AssemblyCopyright="$(ProductCopyright)"
       CLSCompliant="false"
       AssemblyInformationalVersion="$(Major).$(Minor).$(Build).$(Revision).$(RevisionHash)"
       AssemblyVersion="$(AssemblyVersion)"
       AssemblyFileVersion="$(AssemblyVersion)"
	  />
	  
	<AssemblyInfo CodeLanguage="CS"
       OutputFile="$(SrcDirectory)\trondr.OpTools.Gui\Properties\AssemblyInfo.cs"
       AssemblyDescription="$(ProductDescription)"
       AssemblyCompany="$(ProductCompany)"
       AssemblyProduct="trondr.OpTools.Gui"
       AssemblyCopyright="$(ProductCopyright)"
       CLSCompliant="false"
       AssemblyInformationalVersion="$(Major).$(Minor).$(Build).$(Revision).$(RevisionHash)"
       AssemblyVersion="$(AssemblyVersion)"
       AssemblyFileVersion="$(AssemblyVersion)"
	  />
	  
    <AssemblyInfo CodeLanguage="CS"
       OutputFile="$(SrcDirectory)\trondr.OpTools.Library\Properties\AssemblyInfo.cs"
       AssemblyDescription="$(ProductDescription)"
       AssemblyCompany="$(ProductCompany)"
       AssemblyProduct="trondr.OpTools.Library"
       AssemblyCopyright="$(ProductCopyright)"
       CLSCompliant="false"
       AssemblyInformationalVersion="$(Major).$(Minor).$(Build).$(Revision).$(RevisionHash)"
       AssemblyVersion="$(AssemblyVersion)"
       AssemblyFileVersion="$(AssemblyVersion)"
	  />

    <AssemblyInfo CodeLanguage="CS"
      OutputFile="$(SrcDirectory)\trondr.OpTools.Tests\Properties\AssemblyInfo.cs"
      AssemblyDescription="$(ProductDescription)"
      AssemblyCompany="$(ProductCompany)"
      AssemblyProduct="trondr.OpTools.Tests"
      AssemblyCopyright="$(ProductCopyright)"
      CLSCompliant="false"
      AssemblyInformationalVersion="$(Major).$(Minor).$(Build).$(Revision).$(RevisionHash)"
      AssemblyVersion="$(AssemblyVersion)"
      AssemblyFileVersion="$(AssemblyVersion)"
	  />
	    	  
  </Target>
  
  <!--Compile-->
  
  <Target Name="Compile" DependsOnTargets="Version">
    <MSBuild Projects="$(SrcDirectory)\trondr.OpTools.Library\trondr.OpTools.Library.csproj" Properties="Configuration=Release;" />
    <MSBuild Projects="$(SrcDirectory)\trondr.OpTools\trondr.OpTools.csproj" Properties="Configuration=Release;" />
	<MSBuild Projects="$(SrcDirectory)\trondr.OpTools.Gui\trondr.OpTools.Gui.csproj" Properties="Configuration=Release;" />
  </Target>

  <Target Name="CompileTests" DependsOnTargets="Compile">
    <MSBuild Projects="$(SrcDirectory)\trondr.OpTools.Tests\trondr.OpTools.Tests.csproj" Properties="Configuration=Release"/>
  </Target>

  <!--Prepare for test-->
  
  <Target Name="DownloadNunit" Condition=" '$(NUnitIsAvailable)' == 'false' ">
    <Message Text="Downloading NUnit..." Importance="normal" />
	<MakeDir Directories="$(BinDirectory)\Download"/>
    <WebDownload FileUri="http://github.com/nunit/nunitv2/releases/download/$(NunitVersion)/NUnit-$(NunitVersion).zip" FileName="$(BinDirectory)\Download\NUnit-$(NunitVersion).zip" />
    <Message Text="Extracting NUnit..." Importance="normal" />
    <Unzip ZipFileName="$(BinDirectory)\Download\NUnit-$(NunitVersion).zip" TargetDirectory="$(BinDirectory)\Download"/>
    <ItemGroup>
      <NUnitFiles Include="$(BinDirectory)\Download\NUnit-$(NunitVersion)\bin\**\**"/>
    </ItemGroup>
    <Message Text="Copying NUnit to tools folder..." Importance="normal" />
    <Copy SourceFiles="@(NUnitFiles)" DestinationFolder="$(ToolsDirectory)\NUnit\%(RecursiveDir)"/>
    <Copy SourceFiles="$(BinDirectory)\Download\NUnit-$(NunitVersion)\license.txt" DestinationFiles="$(ToolsDirectory)\NUnit\license.txt"/>
    <Delete Files="$(BinDirectory)\Download\NUnit-$(NunitVersion).zip"/>
    <DeleteTree Directories="$(BinDirectory)\Download\NUnit-$(NunitVersion)"/>        
  </Target>

  <!-- Run Unit tests -->
  <Target Name="UnitTests" DependsOnTargets="CompileTests;DownloadNunit">
    <CreateItem Include="$(BinDirectory)\Release\trondr.OpTools.Tests\trondr.OpTools.Tests.dll">
      <Output TaskParameter="Include" ItemName="TestAssembly" />
    </CreateItem>

    <NUnit Assemblies="@(TestAssembly)" IncludeCategory="UnitTests" ToolPath="$(ToolsDirectory)\NUnit"/>
  </Target>

  <Target Name="IntegrationTests" DependsOnTargets="CompileTests;DownloadNunit">
    <CreateItem Include="$(BinDirectory)\Release\trondr.OpTools.Tests\trondr.OpTools.Tests.dll">
      <Output TaskParameter="Include" ItemName="TestAssembly" />
    </CreateItem>
    <NUnit Assemblies="@(TestAssembly)" IncludeCategory="IntegrationTests" ToolPath="$(ToolsDirectory)\NUnit"/>
  </Target>
  
  <!-- Run integration tests under the security context of a user member of a privileged group -->
  <Target Name="AdminUserIntegrationTests" DependsOnTargets="CompileTests;DownloadNunit">
    <RunAsUser UserName="jenny" 
               Password="TestPw.19" 
               Domain="$(USERDOMAIN)" 
               FileName="$(ToolsDirectory)\NUnit\nunit-console.exe" 
               Arguments="/nologo &quot;$(BinDirectory)\Release\trondr.OpTools.Tests\trondr.OpTools.Tests.dll&quot; /include=AdminUserIntegrationTests"/>    
  </Target>

  <!-- Run integration tests under the security context of a user NOT member of a privileged group -->
  <Target Name="StandardUserIntegrationTests" DependsOnTargets="CompileTests;DownloadNunit">
    <RunAsUser UserName="jim"
               Password="TestPw.19"
               Domain="$(USERDOMAIN)"
               FileName="$(ToolsDirectory)\NUnit\nunit-console.exe"
               Arguments="/nologo &quot;$(BinDirectory)\Release\trondr.OpTools.Tests\trondr.OpTools.Tests.dll&quot; /include=StandardUserIntegrationTests"/>
  </Target>

  <Target Name="CompileSetup" DependsOnTargets="SignExeAndDll">
    <MSBuild Projects="$(SrcDirectory)\trondr.OpTools.Setup\trondr.OpTools.Setup.wixproj" Properties="Configuration=Release"/>    
  </Target>
  
  <ItemGroup>
    <SignExeAndDllFiles Include="$(BinDirectory)\Release\trondr.OpTools\**\*.exe" />
    <SignExeAndDllFiles Include="$(BinDirectory)\Release\trondr.OpTools\**\*.dll" />
	
    <SignExeAndDllFiles Include="$(BinDirectory)\Release\trondr.OpTools.Library\**\*.exe" />
    <SignExeAndDllFiles Include="$(BinDirectory)\Release\trondr.OpTools.Library\**\*.dll" />
	
  </ItemGroup>
  
  <Target Name="SignExeAndDll" DependsOnTargets="UnitTests" >
  
	<!--
	
	Ref http://stackoverflow.com/questions/17710357/how-do-i-securely-store-a-pfx-password-to-use-in-msbuild
	
	1. Log in as the build user
	2. Run certmgr.msc
	3. Right-click Certificates - Current User / Personal / Certificates, and select All Tasks / Import...
	4. Select your .pfx file, enter the password, and click Next and Finish
	5. Double-click on the imported certificate
	6. In the Details page, the thumbprint algorithm should be sha1
	7. Copy the thumbprint, it looks something like 12 34 56 78 90 ab cd ef 12 34 56 78 90 ab cd ef 12 34 56 78
	8. Update the PfxSha1Thumbprint parameter below with the looked up sha1 thumbprint
	9. Optionally also update the Description parameter.

	-->
	<SignTool 
		PfxSha1Thumbprint="b34e1136986f0f1e8d7fd7b9adffa0be7e1f8688"
		TimeStampServer="http://timestamp.comodoca.com/authenticode;http://timestamp.verisign.com/scripts/timstamp.dll;http://timestamp.globalsign.com/scripts/timstamp.dll"
		Description="trondr.OpTools Description"
		SignFiles="@(SignExeAndDllFiles)"
		ContinueBuildOnFailure="True"
	/>
  </Target>
  
  
  <ItemGroup>
    <SignMsiFiles Include="$(BinDirectory)\Release\trondr.OpTools.Setup\**\*.msi" />    
  </ItemGroup>
    
  <Target Name="SignMsi" DependsOnTargets="CompileSetup">
	<!--
	
	Ref http://stackoverflow.com/questions/17710357/how-do-i-securely-store-a-pfx-password-to-use-in-msbuild
	
	1. Log in as the build user
	2. Run certmgr.msc
	3. Right-click Certificates - Current User / Personal / Certificates, and select All Tasks / Import...
	4. Select your .pfx file, enter the password, and click Next and Finish
	5. Double-click on the imported certificate
	6. In the Details page, the thumbprint algorithm should be sha1
	7. Copy the thumbprint, it looks something like 12 34 56 78 90 ab cd ef 12 34 56 78 90 ab cd ef 12 34 56 78
	8. Update the PfxSha1Thumbprint parameter below with the looked up sha1 thumbprint
	9. Optionally also update the Description parameter.
	
	-->
  
	<SignTool 
		PfxSha1Thumbprint="b34e1136986f0f1e8d7fd7b9adffa0be7e1f8688"
		TimeStampServer="http://timestamp.comodoca.com/authenticode;http://timestamp.verisign.com/scripts/timstamp.dll;http://timestamp.globalsign.com/scripts/timstamp.dll"
		Description="trondr.OpTools Description"
		SignFiles="@(SignMsiFiles)"
		ContinueBuildOnFailure="True"
	/>
  </Target>

  <ItemGroup>
    <ReleaseFiles Include="$(BinDirectory)\Release\trondr.OpTools\**\*.exe" Exclude="$(BinDirectory)\Release\trondr.OpTools\**\Libs\**" />
    <ReleaseFiles Include="$(BinDirectory)\Release\trondr.OpTools\**\*.dll" Exclude="$(BinDirectory)\Release\trondr.OpTools\**\Libs\**" />
    <ReleaseFiles Include="$(BinDirectory)\Release\trondr.OpTools\**\*.pdb" Exclude="$(BinDirectory)\Release\trondr.OpTools\**\Libs\**" />
    <ReleaseFiles Include="$(BinDirectory)\Release\trondr.OpTools\**\*.config" Exclude="$(BinDirectory)\Release\trondr.OpTools\**\Libs\**" />
  </ItemGroup>  
  
  <Target Name="Deploy" DependsOnTargets="SignMsi">
    
    <Zip Files="@(ReleaseFiles)"
         WorkingDirectory="$(BinDirectory)\Release\$(ProductName)"
         ZipFileName="$(BinDirectory)\Release\trondr.OpTools.$(AssemblyVersion).zip"
         ZipLevel="9"
         />
    <Message Text="trondr.OpTools.$(AssemblyVersion) relase zip complete" Importance="normal" />

   <ItemGroup>
      <SetupFiles Include="$(BinDirectory)\Release\trondr.OpTools.Setup\en-us\trondr.OpTools.$(AssemblyVersion).msi" />
   </ItemGroup>
 	
    <Zip Files="@(SetupFiles)"
         WorkingDirectory="$(BinDirectory)\Release\trondr.OpTools.Setup\en-us"
         ZipFileName="$(BinDirectory)\Release\trondr.OpTools.$(AssemblyVersion).msi.zip"
         ZipLevel="9"
         />
    <Message Text="trondr.OpTools.$(AssemblyVersion).msi zip complete" Importance="normal" />

    <Zip Files="@(SourceFiles)"
         WorkingDirectory="$(MSBuildProjectDirectory)"
         ZipFileName="$(BinDirectory)\Release\trondr.OpTools.Source.$(AssemblyVersion).zip"
         ZipLevel="9"
         />
    <Message Text="trondr.OpTools.Source.$(AssemblyVersion) zip complete" Importance="normal" />    
	
	  <ResolveScriptInstallPackage
      ScriptInstallPackageSourcePath="$(SrcDirectory)\github.com.trondr Op Tools"
      ScriptInstallPackageTargetPath="$(BinDirectory)\Release\github.com.trondr Op Tools $(AssemblyVersion)"
      SourceMsiFile="$(BinDirectory)\Release\trondr.OpTools.Setup\en-us\trondr.OpTools.$(AssemblyVersion).msi"
      TargetMsiFile="$(BinDirectory)\Release\github.com.trondr Op Tools $(AssemblyVersion)\VendorInstall\trondr.OpTools.$(AssemblyVersion).msi"
      VendorInstallIni="$(BinDirectory)\Release\github.com.trondr Op Tools $(AssemblyVersion)\VendorInstall\VendorInstall.ini"
      PackageDefinitionSms="$(BinDirectory)\Release\github.com.trondr Op Tools $(AssemblyVersion)\PackageDefinition.sms"
      PackageDefinitionName="Op Tools"
      PackageDefinitionVersion="$(AssemblyVersion)"
      PackageDefinitionPublisher="github.com.trondr"
      PackageDefinitionComment="github.com.trondr Op Tools"
	  PackageDefinitionInstallCommandLine="Install.cmd Install > &quot;%Public%\Logs\github_com_trondr_Op_Tools$(AssemblyVersionU)_Install.cmd.log&quot;"
      PackageDefinitionUnInstallCommandLine="Install.cmd UnInstall > &quot;%Public%\Logs\github_com_trondr_Op_Tools$(AssemblyVersionU)_UnInstall.cmd.log&quot;"
     />
  </Target>
  
  <Target Name="DeployToSccm" DependsOnTargets="Deploy">
	<CreateSccmApplication 
		PackageDefinitionFile="$(BinDirectory)\Release\github.com.trondr Op Tools $(AssemblyVersion)\PackageDefinition.sms"
		ApplicationSourceFolder="$(BinDirectory)\Release\github.com.trondr Op Tools $(AssemblyVersion)"		
		/>	
  </Target>
  
  <Target Name="Build" DependsOnTargets="CompileSetup">
    <Message Text="$(ProductProjectName).$(AssemblyVersion) build complete" Importance="normal" />
  </Target>
</Project>
